// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ECSSE.proto

#include "ECSSE.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace ECSSE {
constexpr SetupRequestMessage::SetupRequestMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : setup_size_(uint64_t{0u}){}
struct SetupRequestMessageDefaultTypeInternal {
  constexpr SetupRequestMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetupRequestMessageDefaultTypeInternal() {}
  union {
    SetupRequestMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetupRequestMessageDefaultTypeInternal _SetupRequestMessage_default_instance_;
constexpr SearchRequestMessage::SearchRequestMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : st_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , uc_(uint64_t{0u}){}
struct SearchRequestMessageDefaultTypeInternal {
  constexpr SearchRequestMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SearchRequestMessageDefaultTypeInternal() {}
  union {
    SearchRequestMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SearchRequestMessageDefaultTypeInternal _SearchRequestMessage_default_instance_;
constexpr SearchReply::SearchReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ind_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SearchReplyDefaultTypeInternal {
  constexpr SearchReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SearchReplyDefaultTypeInternal() {}
  union {
    SearchReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SearchReplyDefaultTypeInternal _SearchReply_default_instance_;
constexpr CacheRequestMessage::CacheRequestMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : inds_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CacheRequestMessageDefaultTypeInternal {
  constexpr CacheRequestMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CacheRequestMessageDefaultTypeInternal() {}
  union {
    CacheRequestMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CacheRequestMessageDefaultTypeInternal _CacheRequestMessage_default_instance_;
constexpr UpdateRequestMessage::UpdateRequestMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : l_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , e_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct UpdateRequestMessageDefaultTypeInternal {
  constexpr UpdateRequestMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateRequestMessageDefaultTypeInternal() {}
  union {
    UpdateRequestMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateRequestMessageDefaultTypeInternal _UpdateRequestMessage_default_instance_;
constexpr ExecuteStatus::ExecuteStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(false){}
struct ExecuteStatusDefaultTypeInternal {
  constexpr ExecuteStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExecuteStatusDefaultTypeInternal() {}
  union {
    ExecuteStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExecuteStatusDefaultTypeInternal _ExecuteStatus_default_instance_;
}  // namespace ECSSE
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ECSSE_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ECSSE_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ECSSE_2eproto = nullptr;

const uint32_t TableStruct_ECSSE_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ECSSE::SetupRequestMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ECSSE::SetupRequestMessage, setup_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ECSSE::SearchRequestMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ECSSE::SearchRequestMessage, st_),
  PROTOBUF_FIELD_OFFSET(::ECSSE::SearchRequestMessage, uc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ECSSE::SearchReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ECSSE::SearchReply, ind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ECSSE::CacheRequestMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ECSSE::CacheRequestMessage, inds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ECSSE::UpdateRequestMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ECSSE::UpdateRequestMessage, l_),
  PROTOBUF_FIELD_OFFSET(::ECSSE::UpdateRequestMessage, e_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ECSSE::ExecuteStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ECSSE::ExecuteStatus, status_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ECSSE::SetupRequestMessage)},
  { 7, -1, -1, sizeof(::ECSSE::SearchRequestMessage)},
  { 15, -1, -1, sizeof(::ECSSE::SearchReply)},
  { 22, -1, -1, sizeof(::ECSSE::CacheRequestMessage)},
  { 29, -1, -1, sizeof(::ECSSE::UpdateRequestMessage)},
  { 37, -1, -1, sizeof(::ECSSE::ExecuteStatus)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ECSSE::_SetupRequestMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ECSSE::_SearchRequestMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ECSSE::_SearchReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ECSSE::_CacheRequestMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ECSSE::_UpdateRequestMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ECSSE::_ExecuteStatus_default_instance_),
};

const char descriptor_table_protodef_ECSSE_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013ECSSE.proto\022\005ECSSE\")\n\023SetupRequestMess"
  "age\022\022\n\nsetup_size\030\001 \001(\004\".\n\024SearchRequest"
  "Message\022\n\n\002st\030\001 \001(\014\022\n\n\002uc\030\002 \001(\004\"\032\n\013Searc"
  "hReply\022\013\n\003ind\030\001 \001(\014\"#\n\023CacheRequestMessa"
  "ge\022\014\n\004inds\030\001 \001(\014\",\n\024UpdateRequestMessage"
  "\022\t\n\001l\030\001 \001(\014\022\t\n\001e\030\002 \001(\014\"\037\n\rExecuteStatus\022"
  "\016\n\006status\030\001 \001(\0102\211\003\n\003RPC\022;\n\005setup\022\032.ECSSE"
  ".SetupRequestMessage\032\024.ECSSE.ExecuteStat"
  "us\"\000\022=\n\006search\022\033.ECSSE.SearchRequestMess"
  "age\032\022.ECSSE.SearchReply\"\0000\001\022=\n\006update\022\033."
  "ECSSE.UpdateRequestMessage\032\024.ECSSE.Execu"
  "teStatus\"\000\022E\n\014batch_update\022\033.ECSSE.Updat"
  "eRequestMessage\032\024.ECSSE.ExecuteStatus\"\000("
  "\001\022;\n\005cache\022\032.ECSSE.CacheRequestMessage\032\024"
  ".ECSSE.ExecuteStatus\"\000\022C\n\013batch_cache\022\032."
  "ECSSE.CacheRequestMessage\032\024.ECSSE.Execut"
  "eStatus\"\000(\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ECSSE_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ECSSE_2eproto = {
  false, false, 659, descriptor_table_protodef_ECSSE_2eproto, "ECSSE.proto", 
  &descriptor_table_ECSSE_2eproto_once, nullptr, 0, 6,
  schemas, file_default_instances, TableStruct_ECSSE_2eproto::offsets,
  file_level_metadata_ECSSE_2eproto, file_level_enum_descriptors_ECSSE_2eproto, file_level_service_descriptors_ECSSE_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_ECSSE_2eproto_getter() {
  return &descriptor_table_ECSSE_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ECSSE_2eproto(&descriptor_table_ECSSE_2eproto);
namespace ECSSE {

// ===================================================================

class SetupRequestMessage::_Internal {
 public:
};

SetupRequestMessage::SetupRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ECSSE.SetupRequestMessage)
}
SetupRequestMessage::SetupRequestMessage(const SetupRequestMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  setup_size_ = from.setup_size_;
  // @@protoc_insertion_point(copy_constructor:ECSSE.SetupRequestMessage)
}

inline void SetupRequestMessage::SharedCtor() {
setup_size_ = uint64_t{0u};
}

SetupRequestMessage::~SetupRequestMessage() {
  // @@protoc_insertion_point(destructor:ECSSE.SetupRequestMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetupRequestMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetupRequestMessage::ArenaDtor(void* object) {
  SetupRequestMessage* _this = reinterpret_cast< SetupRequestMessage* >(object);
  (void)_this;
}
void SetupRequestMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetupRequestMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetupRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ECSSE.SetupRequestMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  setup_size_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetupRequestMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 setup_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          setup_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetupRequestMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ECSSE.SetupRequestMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 setup_size = 1;
  if (this->_internal_setup_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_setup_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ECSSE.SetupRequestMessage)
  return target;
}

size_t SetupRequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ECSSE.SetupRequestMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 setup_size = 1;
  if (this->_internal_setup_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_setup_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetupRequestMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetupRequestMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetupRequestMessage::GetClassData() const { return &_class_data_; }

void SetupRequestMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetupRequestMessage *>(to)->MergeFrom(
      static_cast<const SetupRequestMessage &>(from));
}


void SetupRequestMessage::MergeFrom(const SetupRequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ECSSE.SetupRequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_setup_size() != 0) {
    _internal_set_setup_size(from._internal_setup_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetupRequestMessage::CopyFrom(const SetupRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ECSSE.SetupRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetupRequestMessage::IsInitialized() const {
  return true;
}

void SetupRequestMessage::InternalSwap(SetupRequestMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(setup_size_, other->setup_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetupRequestMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ECSSE_2eproto_getter, &descriptor_table_ECSSE_2eproto_once,
      file_level_metadata_ECSSE_2eproto[0]);
}

// ===================================================================

class SearchRequestMessage::_Internal {
 public:
};

SearchRequestMessage::SearchRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ECSSE.SearchRequestMessage)
}
SearchRequestMessage::SearchRequestMessage(const SearchRequestMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  st_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    st_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_st().empty()) {
    st_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_st(), 
      GetArenaForAllocation());
  }
  uc_ = from.uc_;
  // @@protoc_insertion_point(copy_constructor:ECSSE.SearchRequestMessage)
}

inline void SearchRequestMessage::SharedCtor() {
st_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  st_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
uc_ = uint64_t{0u};
}

SearchRequestMessage::~SearchRequestMessage() {
  // @@protoc_insertion_point(destructor:ECSSE.SearchRequestMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SearchRequestMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  st_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SearchRequestMessage::ArenaDtor(void* object) {
  SearchRequestMessage* _this = reinterpret_cast< SearchRequestMessage* >(object);
  (void)_this;
}
void SearchRequestMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SearchRequestMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SearchRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ECSSE.SearchRequestMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  st_.ClearToEmpty();
  uc_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchRequestMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes st = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_st();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 uc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SearchRequestMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ECSSE.SearchRequestMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes st = 1;
  if (!this->_internal_st().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_st(), target);
  }

  // uint64 uc = 2;
  if (this->_internal_uc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_uc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ECSSE.SearchRequestMessage)
  return target;
}

size_t SearchRequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ECSSE.SearchRequestMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes st = 1;
  if (!this->_internal_st().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_st());
  }

  // uint64 uc = 2;
  if (this->_internal_uc() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_uc());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SearchRequestMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SearchRequestMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SearchRequestMessage::GetClassData() const { return &_class_data_; }

void SearchRequestMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SearchRequestMessage *>(to)->MergeFrom(
      static_cast<const SearchRequestMessage &>(from));
}


void SearchRequestMessage::MergeFrom(const SearchRequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ECSSE.SearchRequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_st().empty()) {
    _internal_set_st(from._internal_st());
  }
  if (from._internal_uc() != 0) {
    _internal_set_uc(from._internal_uc());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SearchRequestMessage::CopyFrom(const SearchRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ECSSE.SearchRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchRequestMessage::IsInitialized() const {
  return true;
}

void SearchRequestMessage::InternalSwap(SearchRequestMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &st_, lhs_arena,
      &other->st_, rhs_arena
  );
  swap(uc_, other->uc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchRequestMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ECSSE_2eproto_getter, &descriptor_table_ECSSE_2eproto_once,
      file_level_metadata_ECSSE_2eproto[1]);
}

// ===================================================================

class SearchReply::_Internal {
 public:
};

SearchReply::SearchReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ECSSE.SearchReply)
}
SearchReply::SearchReply(const SearchReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ind_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ind_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ind().empty()) {
    ind_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ind(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ECSSE.SearchReply)
}

inline void SearchReply::SharedCtor() {
ind_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ind_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SearchReply::~SearchReply() {
  // @@protoc_insertion_point(destructor:ECSSE.SearchReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SearchReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ind_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SearchReply::ArenaDtor(void* object) {
  SearchReply* _this = reinterpret_cast< SearchReply* >(object);
  (void)_this;
}
void SearchReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SearchReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SearchReply::Clear() {
// @@protoc_insertion_point(message_clear_start:ECSSE.SearchReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ind_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes ind = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ind();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SearchReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ECSSE.SearchReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes ind = 1;
  if (!this->_internal_ind().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_ind(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ECSSE.SearchReply)
  return target;
}

size_t SearchReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ECSSE.SearchReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes ind = 1;
  if (!this->_internal_ind().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ind());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SearchReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SearchReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SearchReply::GetClassData() const { return &_class_data_; }

void SearchReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SearchReply *>(to)->MergeFrom(
      static_cast<const SearchReply &>(from));
}


void SearchReply::MergeFrom(const SearchReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ECSSE.SearchReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ind().empty()) {
    _internal_set_ind(from._internal_ind());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SearchReply::CopyFrom(const SearchReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ECSSE.SearchReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchReply::IsInitialized() const {
  return true;
}

void SearchReply::InternalSwap(SearchReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ind_, lhs_arena,
      &other->ind_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ECSSE_2eproto_getter, &descriptor_table_ECSSE_2eproto_once,
      file_level_metadata_ECSSE_2eproto[2]);
}

// ===================================================================

class CacheRequestMessage::_Internal {
 public:
};

CacheRequestMessage::CacheRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ECSSE.CacheRequestMessage)
}
CacheRequestMessage::CacheRequestMessage(const CacheRequestMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  inds_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    inds_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_inds().empty()) {
    inds_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_inds(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ECSSE.CacheRequestMessage)
}

inline void CacheRequestMessage::SharedCtor() {
inds_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  inds_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CacheRequestMessage::~CacheRequestMessage() {
  // @@protoc_insertion_point(destructor:ECSSE.CacheRequestMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CacheRequestMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  inds_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CacheRequestMessage::ArenaDtor(void* object) {
  CacheRequestMessage* _this = reinterpret_cast< CacheRequestMessage* >(object);
  (void)_this;
}
void CacheRequestMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CacheRequestMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CacheRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ECSSE.CacheRequestMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inds_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CacheRequestMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes inds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_inds();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CacheRequestMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ECSSE.CacheRequestMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes inds = 1;
  if (!this->_internal_inds().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_inds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ECSSE.CacheRequestMessage)
  return target;
}

size_t CacheRequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ECSSE.CacheRequestMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes inds = 1;
  if (!this->_internal_inds().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_inds());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CacheRequestMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CacheRequestMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CacheRequestMessage::GetClassData() const { return &_class_data_; }

void CacheRequestMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CacheRequestMessage *>(to)->MergeFrom(
      static_cast<const CacheRequestMessage &>(from));
}


void CacheRequestMessage::MergeFrom(const CacheRequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ECSSE.CacheRequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_inds().empty()) {
    _internal_set_inds(from._internal_inds());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CacheRequestMessage::CopyFrom(const CacheRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ECSSE.CacheRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CacheRequestMessage::IsInitialized() const {
  return true;
}

void CacheRequestMessage::InternalSwap(CacheRequestMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &inds_, lhs_arena,
      &other->inds_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CacheRequestMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ECSSE_2eproto_getter, &descriptor_table_ECSSE_2eproto_once,
      file_level_metadata_ECSSE_2eproto[3]);
}

// ===================================================================

class UpdateRequestMessage::_Internal {
 public:
};

UpdateRequestMessage::UpdateRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ECSSE.UpdateRequestMessage)
}
UpdateRequestMessage::UpdateRequestMessage(const UpdateRequestMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  l_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    l_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_l().empty()) {
    l_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_l(), 
      GetArenaForAllocation());
  }
  e_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    e_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_e().empty()) {
    e_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_e(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ECSSE.UpdateRequestMessage)
}

inline void UpdateRequestMessage::SharedCtor() {
l_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  l_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
e_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  e_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UpdateRequestMessage::~UpdateRequestMessage() {
  // @@protoc_insertion_point(destructor:ECSSE.UpdateRequestMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateRequestMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  l_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  e_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdateRequestMessage::ArenaDtor(void* object) {
  UpdateRequestMessage* _this = reinterpret_cast< UpdateRequestMessage* >(object);
  (void)_this;
}
void UpdateRequestMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateRequestMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ECSSE.UpdateRequestMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  l_.ClearToEmpty();
  e_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateRequestMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes l = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_l();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes e = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_e();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateRequestMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ECSSE.UpdateRequestMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes l = 1;
  if (!this->_internal_l().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_l(), target);
  }

  // bytes e = 2;
  if (!this->_internal_e().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_e(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ECSSE.UpdateRequestMessage)
  return target;
}

size_t UpdateRequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ECSSE.UpdateRequestMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes l = 1;
  if (!this->_internal_l().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_l());
  }

  // bytes e = 2;
  if (!this->_internal_e().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_e());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateRequestMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateRequestMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateRequestMessage::GetClassData() const { return &_class_data_; }

void UpdateRequestMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UpdateRequestMessage *>(to)->MergeFrom(
      static_cast<const UpdateRequestMessage &>(from));
}


void UpdateRequestMessage::MergeFrom(const UpdateRequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ECSSE.UpdateRequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_l().empty()) {
    _internal_set_l(from._internal_l());
  }
  if (!from._internal_e().empty()) {
    _internal_set_e(from._internal_e());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateRequestMessage::CopyFrom(const UpdateRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ECSSE.UpdateRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateRequestMessage::IsInitialized() const {
  return true;
}

void UpdateRequestMessage::InternalSwap(UpdateRequestMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &l_, lhs_arena,
      &other->l_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &e_, lhs_arena,
      &other->e_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateRequestMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ECSSE_2eproto_getter, &descriptor_table_ECSSE_2eproto_once,
      file_level_metadata_ECSSE_2eproto[4]);
}

// ===================================================================

class ExecuteStatus::_Internal {
 public:
};

ExecuteStatus::ExecuteStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ECSSE.ExecuteStatus)
}
ExecuteStatus::ExecuteStatus(const ExecuteStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:ECSSE.ExecuteStatus)
}

inline void ExecuteStatus::SharedCtor() {
status_ = false;
}

ExecuteStatus::~ExecuteStatus() {
  // @@protoc_insertion_point(destructor:ECSSE.ExecuteStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExecuteStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ExecuteStatus::ArenaDtor(void* object) {
  ExecuteStatus* _this = reinterpret_cast< ExecuteStatus* >(object);
  (void)_this;
}
void ExecuteStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExecuteStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExecuteStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:ECSSE.ExecuteStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecuteStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExecuteStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ECSSE.ExecuteStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ECSSE.ExecuteStatus)
  return target;
}

size_t ExecuteStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ECSSE.ExecuteStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExecuteStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ExecuteStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExecuteStatus::GetClassData() const { return &_class_data_; }

void ExecuteStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ExecuteStatus *>(to)->MergeFrom(
      static_cast<const ExecuteStatus &>(from));
}


void ExecuteStatus::MergeFrom(const ExecuteStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ECSSE.ExecuteStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExecuteStatus::CopyFrom(const ExecuteStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ECSSE.ExecuteStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteStatus::IsInitialized() const {
  return true;
}

void ExecuteStatus::InternalSwap(ExecuteStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecuteStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ECSSE_2eproto_getter, &descriptor_table_ECSSE_2eproto_once,
      file_level_metadata_ECSSE_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ECSSE
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ECSSE::SetupRequestMessage* Arena::CreateMaybeMessage< ::ECSSE::SetupRequestMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ECSSE::SetupRequestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ECSSE::SearchRequestMessage* Arena::CreateMaybeMessage< ::ECSSE::SearchRequestMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ECSSE::SearchRequestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ECSSE::SearchReply* Arena::CreateMaybeMessage< ::ECSSE::SearchReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ECSSE::SearchReply >(arena);
}
template<> PROTOBUF_NOINLINE ::ECSSE::CacheRequestMessage* Arena::CreateMaybeMessage< ::ECSSE::CacheRequestMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ECSSE::CacheRequestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ECSSE::UpdateRequestMessage* Arena::CreateMaybeMessage< ::ECSSE::UpdateRequestMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ECSSE::UpdateRequestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ECSSE::ExecuteStatus* Arena::CreateMaybeMessage< ::ECSSE::ExecuteStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ECSSE::ExecuteStatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

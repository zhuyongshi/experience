// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: VH.proto

#include "VH.pb.h"
#include "VH.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace VH {

static const char* RPC_method_names[] = {
  "/VH.RPC/search",
  "/VH.RPC/update",
};

std::unique_ptr< RPC::Stub> RPC::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RPC::Stub> stub(new RPC::Stub(channel, options));
  return stub;
}

RPC::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_search_(RPC_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_update_(RPC_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::VH::SearchRequestMessage, ::VH::SearchReply>* RPC::Stub::searchRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::VH::SearchRequestMessage, ::VH::SearchReply>::Create(channel_.get(), rpcmethod_search_, context);
}

void RPC::Stub::async::search(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::VH::SearchRequestMessage,::VH::SearchReply>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::VH::SearchRequestMessage,::VH::SearchReply>::Create(stub_->channel_.get(), stub_->rpcmethod_search_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::VH::SearchRequestMessage, ::VH::SearchReply>* RPC::Stub::AsyncsearchRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::VH::SearchRequestMessage, ::VH::SearchReply>::Create(channel_.get(), cq, rpcmethod_search_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::VH::SearchRequestMessage, ::VH::SearchReply>* RPC::Stub::PrepareAsyncsearchRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::VH::SearchRequestMessage, ::VH::SearchReply>::Create(channel_.get(), cq, rpcmethod_search_, context, false, nullptr);
}

::grpc::ClientWriter< ::VH::UpdateRequestMessage>* RPC::Stub::updateRaw(::grpc::ClientContext* context, ::VH::ExecuteStatus* response) {
  return ::grpc::internal::ClientWriterFactory< ::VH::UpdateRequestMessage>::Create(channel_.get(), rpcmethod_update_, context, response);
}

void RPC::Stub::async::update(::grpc::ClientContext* context, ::VH::ExecuteStatus* response, ::grpc::ClientWriteReactor< ::VH::UpdateRequestMessage>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::VH::UpdateRequestMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_update_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::VH::UpdateRequestMessage>* RPC::Stub::AsyncupdateRaw(::grpc::ClientContext* context, ::VH::ExecuteStatus* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::VH::UpdateRequestMessage>::Create(channel_.get(), cq, rpcmethod_update_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::VH::UpdateRequestMessage>* RPC::Stub::PrepareAsyncupdateRaw(::grpc::ClientContext* context, ::VH::ExecuteStatus* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::VH::UpdateRequestMessage>::Create(channel_.get(), cq, rpcmethod_update_, context, response, false, nullptr);
}

RPC::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RPC_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< RPC::Service, ::VH::SearchRequestMessage, ::VH::SearchReply>(
          [](RPC::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::VH::SearchReply,
             ::VH::SearchRequestMessage>* stream) {
               return service->search(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RPC_method_names[1],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< RPC::Service, ::VH::UpdateRequestMessage, ::VH::ExecuteStatus>(
          [](RPC::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::VH::UpdateRequestMessage>* reader,
             ::VH::ExecuteStatus* resp) {
               return service->update(ctx, reader, resp);
             }, this)));
}

RPC::Service::~Service() {
}

::grpc::Status RPC::Service::search(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::VH::SearchReply, ::VH::SearchRequestMessage>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RPC::Service::update(::grpc::ServerContext* context, ::grpc::ServerReader< ::VH::UpdateRequestMessage>* reader, ::VH::ExecuteStatus* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace VH


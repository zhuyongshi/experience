// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: VH.proto
// Original file comments:
//
// Created by yongshi zhu on 12/11/2022
// Email: 993015403@qq.com
// 
#ifndef GRPC_VH_2eproto__INCLUDED
#define GRPC_VH_2eproto__INCLUDED

#include "VH.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace VH {

class RPC final {
 public:
  static constexpr char const* service_full_name() {
    return "VH.RPC";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Search
    std::unique_ptr< ::grpc::ClientReaderInterface< ::VH::SearchReply>> search(::grpc::ClientContext* context, const ::VH::SearchRequestMessage& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::VH::SearchReply>>(searchRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::VH::SearchReply>> Asyncsearch(::grpc::ClientContext* context, const ::VH::SearchRequestMessage& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::VH::SearchReply>>(AsyncsearchRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::VH::SearchReply>> PrepareAsyncsearch(::grpc::ClientContext* context, const ::VH::SearchRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::VH::SearchReply>>(PrepareAsyncsearchRaw(context, request, cq));
    }
    // Update 
    virtual ::grpc::Status update(::grpc::ClientContext* context, const ::VH::UpdateRequestMessage& request, ::VH::ExecuteStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VH::ExecuteStatus>> Asyncupdate(::grpc::ClientContext* context, const ::VH::UpdateRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VH::ExecuteStatus>>(AsyncupdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VH::ExecuteStatus>> PrepareAsyncupdate(::grpc::ClientContext* context, const ::VH::UpdateRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VH::ExecuteStatus>>(PrepareAsyncupdateRaw(context, request, cq));
    }
    // batch update
    std::unique_ptr< ::grpc::ClientWriterInterface< ::VH::UpdateRequestMessage>> batchupdate(::grpc::ClientContext* context, ::VH::ExecuteStatus* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::VH::UpdateRequestMessage>>(batchupdateRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::VH::UpdateRequestMessage>> Asyncbatchupdate(::grpc::ClientContext* context, ::VH::ExecuteStatus* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::VH::UpdateRequestMessage>>(AsyncbatchupdateRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::VH::UpdateRequestMessage>> PrepareAsyncbatchupdate(::grpc::ClientContext* context, ::VH::ExecuteStatus* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::VH::UpdateRequestMessage>>(PrepareAsyncbatchupdateRaw(context, response, cq));
    }
    // Update DX
    virtual ::grpc::Status updateDX(::grpc::ClientContext* context, const ::VH::UpdateDXMessage& request, ::VH::ExecuteStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VH::ExecuteStatus>> AsyncupdateDX(::grpc::ClientContext* context, const ::VH::UpdateDXMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VH::ExecuteStatus>>(AsyncupdateDXRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VH::ExecuteStatus>> PrepareAsyncupdateDX(::grpc::ClientContext* context, const ::VH::UpdateDXMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VH::ExecuteStatus>>(PrepareAsyncupdateDXRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Search
      virtual void search(::grpc::ClientContext* context, const ::VH::SearchRequestMessage* request, ::grpc::ClientReadReactor< ::VH::SearchReply>* reactor) = 0;
      // Update 
      virtual void update(::grpc::ClientContext* context, const ::VH::UpdateRequestMessage* request, ::VH::ExecuteStatus* response, std::function<void(::grpc::Status)>) = 0;
      virtual void update(::grpc::ClientContext* context, const ::VH::UpdateRequestMessage* request, ::VH::ExecuteStatus* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // batch update
      virtual void batchupdate(::grpc::ClientContext* context, ::VH::ExecuteStatus* response, ::grpc::ClientWriteReactor< ::VH::UpdateRequestMessage>* reactor) = 0;
      // Update DX
      virtual void updateDX(::grpc::ClientContext* context, const ::VH::UpdateDXMessage* request, ::VH::ExecuteStatus* response, std::function<void(::grpc::Status)>) = 0;
      virtual void updateDX(::grpc::ClientContext* context, const ::VH::UpdateDXMessage* request, ::VH::ExecuteStatus* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderInterface< ::VH::SearchReply>* searchRaw(::grpc::ClientContext* context, const ::VH::SearchRequestMessage& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::VH::SearchReply>* AsyncsearchRaw(::grpc::ClientContext* context, const ::VH::SearchRequestMessage& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::VH::SearchReply>* PrepareAsyncsearchRaw(::grpc::ClientContext* context, const ::VH::SearchRequestMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VH::ExecuteStatus>* AsyncupdateRaw(::grpc::ClientContext* context, const ::VH::UpdateRequestMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VH::ExecuteStatus>* PrepareAsyncupdateRaw(::grpc::ClientContext* context, const ::VH::UpdateRequestMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::VH::UpdateRequestMessage>* batchupdateRaw(::grpc::ClientContext* context, ::VH::ExecuteStatus* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::VH::UpdateRequestMessage>* AsyncbatchupdateRaw(::grpc::ClientContext* context, ::VH::ExecuteStatus* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::VH::UpdateRequestMessage>* PrepareAsyncbatchupdateRaw(::grpc::ClientContext* context, ::VH::ExecuteStatus* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VH::ExecuteStatus>* AsyncupdateDXRaw(::grpc::ClientContext* context, const ::VH::UpdateDXMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VH::ExecuteStatus>* PrepareAsyncupdateDXRaw(::grpc::ClientContext* context, const ::VH::UpdateDXMessage& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReader< ::VH::SearchReply>> search(::grpc::ClientContext* context, const ::VH::SearchRequestMessage& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::VH::SearchReply>>(searchRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::VH::SearchReply>> Asyncsearch(::grpc::ClientContext* context, const ::VH::SearchRequestMessage& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::VH::SearchReply>>(AsyncsearchRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::VH::SearchReply>> PrepareAsyncsearch(::grpc::ClientContext* context, const ::VH::SearchRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::VH::SearchReply>>(PrepareAsyncsearchRaw(context, request, cq));
    }
    ::grpc::Status update(::grpc::ClientContext* context, const ::VH::UpdateRequestMessage& request, ::VH::ExecuteStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VH::ExecuteStatus>> Asyncupdate(::grpc::ClientContext* context, const ::VH::UpdateRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VH::ExecuteStatus>>(AsyncupdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VH::ExecuteStatus>> PrepareAsyncupdate(::grpc::ClientContext* context, const ::VH::UpdateRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VH::ExecuteStatus>>(PrepareAsyncupdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::VH::UpdateRequestMessage>> batchupdate(::grpc::ClientContext* context, ::VH::ExecuteStatus* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::VH::UpdateRequestMessage>>(batchupdateRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::VH::UpdateRequestMessage>> Asyncbatchupdate(::grpc::ClientContext* context, ::VH::ExecuteStatus* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::VH::UpdateRequestMessage>>(AsyncbatchupdateRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::VH::UpdateRequestMessage>> PrepareAsyncbatchupdate(::grpc::ClientContext* context, ::VH::ExecuteStatus* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::VH::UpdateRequestMessage>>(PrepareAsyncbatchupdateRaw(context, response, cq));
    }
    ::grpc::Status updateDX(::grpc::ClientContext* context, const ::VH::UpdateDXMessage& request, ::VH::ExecuteStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VH::ExecuteStatus>> AsyncupdateDX(::grpc::ClientContext* context, const ::VH::UpdateDXMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VH::ExecuteStatus>>(AsyncupdateDXRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VH::ExecuteStatus>> PrepareAsyncupdateDX(::grpc::ClientContext* context, const ::VH::UpdateDXMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VH::ExecuteStatus>>(PrepareAsyncupdateDXRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void search(::grpc::ClientContext* context, const ::VH::SearchRequestMessage* request, ::grpc::ClientReadReactor< ::VH::SearchReply>* reactor) override;
      void update(::grpc::ClientContext* context, const ::VH::UpdateRequestMessage* request, ::VH::ExecuteStatus* response, std::function<void(::grpc::Status)>) override;
      void update(::grpc::ClientContext* context, const ::VH::UpdateRequestMessage* request, ::VH::ExecuteStatus* response, ::grpc::ClientUnaryReactor* reactor) override;
      void batchupdate(::grpc::ClientContext* context, ::VH::ExecuteStatus* response, ::grpc::ClientWriteReactor< ::VH::UpdateRequestMessage>* reactor) override;
      void updateDX(::grpc::ClientContext* context, const ::VH::UpdateDXMessage* request, ::VH::ExecuteStatus* response, std::function<void(::grpc::Status)>) override;
      void updateDX(::grpc::ClientContext* context, const ::VH::UpdateDXMessage* request, ::VH::ExecuteStatus* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReader< ::VH::SearchReply>* searchRaw(::grpc::ClientContext* context, const ::VH::SearchRequestMessage& request) override;
    ::grpc::ClientAsyncReader< ::VH::SearchReply>* AsyncsearchRaw(::grpc::ClientContext* context, const ::VH::SearchRequestMessage& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::VH::SearchReply>* PrepareAsyncsearchRaw(::grpc::ClientContext* context, const ::VH::SearchRequestMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VH::ExecuteStatus>* AsyncupdateRaw(::grpc::ClientContext* context, const ::VH::UpdateRequestMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VH::ExecuteStatus>* PrepareAsyncupdateRaw(::grpc::ClientContext* context, const ::VH::UpdateRequestMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::VH::UpdateRequestMessage>* batchupdateRaw(::grpc::ClientContext* context, ::VH::ExecuteStatus* response) override;
    ::grpc::ClientAsyncWriter< ::VH::UpdateRequestMessage>* AsyncbatchupdateRaw(::grpc::ClientContext* context, ::VH::ExecuteStatus* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::VH::UpdateRequestMessage>* PrepareAsyncbatchupdateRaw(::grpc::ClientContext* context, ::VH::ExecuteStatus* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VH::ExecuteStatus>* AsyncupdateDXRaw(::grpc::ClientContext* context, const ::VH::UpdateDXMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VH::ExecuteStatus>* PrepareAsyncupdateDXRaw(::grpc::ClientContext* context, const ::VH::UpdateDXMessage& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_search_;
    const ::grpc::internal::RpcMethod rpcmethod_update_;
    const ::grpc::internal::RpcMethod rpcmethod_batchupdate_;
    const ::grpc::internal::RpcMethod rpcmethod_updateDX_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Search
    virtual ::grpc::Status search(::grpc::ServerContext* context, const ::VH::SearchRequestMessage* request, ::grpc::ServerWriter< ::VH::SearchReply>* writer);
    // Update 
    virtual ::grpc::Status update(::grpc::ServerContext* context, const ::VH::UpdateRequestMessage* request, ::VH::ExecuteStatus* response);
    // batch update
    virtual ::grpc::Status batchupdate(::grpc::ServerContext* context, ::grpc::ServerReader< ::VH::UpdateRequestMessage>* reader, ::VH::ExecuteStatus* response);
    // Update DX
    virtual ::grpc::Status updateDX(::grpc::ServerContext* context, const ::VH::UpdateDXMessage* request, ::VH::ExecuteStatus* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_search() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search(::grpc::ServerContext* /*context*/, const ::VH::SearchRequestMessage* /*request*/, ::grpc::ServerWriter< ::VH::SearchReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestsearch(::grpc::ServerContext* context, ::VH::SearchRequestMessage* request, ::grpc::ServerAsyncWriter< ::VH::SearchReply>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_update() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status update(::grpc::ServerContext* /*context*/, const ::VH::UpdateRequestMessage* /*request*/, ::VH::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestupdate(::grpc::ServerContext* context, ::VH::UpdateRequestMessage* request, ::grpc::ServerAsyncResponseWriter< ::VH::ExecuteStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_batchupdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_batchupdate() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_batchupdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batchupdate(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::VH::UpdateRequestMessage>* /*reader*/, ::VH::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestbatchupdate(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::VH::ExecuteStatus, ::VH::UpdateRequestMessage>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_updateDX : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_updateDX() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_updateDX() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateDX(::grpc::ServerContext* /*context*/, const ::VH::UpdateDXMessage* /*request*/, ::VH::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestupdateDX(::grpc::ServerContext* context, ::VH::UpdateDXMessage* request, ::grpc::ServerAsyncResponseWriter< ::VH::ExecuteStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_search<WithAsyncMethod_update<WithAsyncMethod_batchupdate<WithAsyncMethod_updateDX<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_search() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::VH::SearchRequestMessage, ::VH::SearchReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::VH::SearchRequestMessage* request) { return this->search(context, request); }));
    }
    ~WithCallbackMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search(::grpc::ServerContext* /*context*/, const ::VH::SearchRequestMessage* /*request*/, ::grpc::ServerWriter< ::VH::SearchReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::VH::SearchReply>* search(
      ::grpc::CallbackServerContext* /*context*/, const ::VH::SearchRequestMessage* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_update() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::VH::UpdateRequestMessage, ::VH::ExecuteStatus>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::VH::UpdateRequestMessage* request, ::VH::ExecuteStatus* response) { return this->update(context, request, response); }));}
    void SetMessageAllocatorFor_update(
        ::grpc::MessageAllocator< ::VH::UpdateRequestMessage, ::VH::ExecuteStatus>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VH::UpdateRequestMessage, ::VH::ExecuteStatus>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status update(::grpc::ServerContext* /*context*/, const ::VH::UpdateRequestMessage* /*request*/, ::VH::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* update(
      ::grpc::CallbackServerContext* /*context*/, const ::VH::UpdateRequestMessage* /*request*/, ::VH::ExecuteStatus* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_batchupdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_batchupdate() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackClientStreamingHandler< ::VH::UpdateRequestMessage, ::VH::ExecuteStatus>(
            [this](
                   ::grpc::CallbackServerContext* context, ::VH::ExecuteStatus* response) { return this->batchupdate(context, response); }));
    }
    ~WithCallbackMethod_batchupdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batchupdate(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::VH::UpdateRequestMessage>* /*reader*/, ::VH::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::VH::UpdateRequestMessage>* batchupdate(
      ::grpc::CallbackServerContext* /*context*/, ::VH::ExecuteStatus* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_updateDX : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_updateDX() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::VH::UpdateDXMessage, ::VH::ExecuteStatus>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::VH::UpdateDXMessage* request, ::VH::ExecuteStatus* response) { return this->updateDX(context, request, response); }));}
    void SetMessageAllocatorFor_updateDX(
        ::grpc::MessageAllocator< ::VH::UpdateDXMessage, ::VH::ExecuteStatus>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::VH::UpdateDXMessage, ::VH::ExecuteStatus>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_updateDX() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateDX(::grpc::ServerContext* /*context*/, const ::VH::UpdateDXMessage* /*request*/, ::VH::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* updateDX(
      ::grpc::CallbackServerContext* /*context*/, const ::VH::UpdateDXMessage* /*request*/, ::VH::ExecuteStatus* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_search<WithCallbackMethod_update<WithCallbackMethod_batchupdate<WithCallbackMethod_updateDX<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_search() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search(::grpc::ServerContext* /*context*/, const ::VH::SearchRequestMessage* /*request*/, ::grpc::ServerWriter< ::VH::SearchReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_update() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status update(::grpc::ServerContext* /*context*/, const ::VH::UpdateRequestMessage* /*request*/, ::VH::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_batchupdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_batchupdate() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_batchupdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batchupdate(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::VH::UpdateRequestMessage>* /*reader*/, ::VH::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_updateDX : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_updateDX() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_updateDX() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateDX(::grpc::ServerContext* /*context*/, const ::VH::UpdateDXMessage* /*request*/, ::VH::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_search() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search(::grpc::ServerContext* /*context*/, const ::VH::SearchRequestMessage* /*request*/, ::grpc::ServerWriter< ::VH::SearchReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestsearch(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_update() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status update(::grpc::ServerContext* /*context*/, const ::VH::UpdateRequestMessage* /*request*/, ::VH::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestupdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_batchupdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_batchupdate() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_batchupdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batchupdate(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::VH::UpdateRequestMessage>* /*reader*/, ::VH::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestbatchupdate(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_updateDX : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_updateDX() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_updateDX() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateDX(::grpc::ServerContext* /*context*/, const ::VH::UpdateDXMessage* /*request*/, ::VH::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestupdateDX(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_search() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->search(context, request); }));
    }
    ~WithRawCallbackMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search(::grpc::ServerContext* /*context*/, const ::VH::SearchRequestMessage* /*request*/, ::grpc::ServerWriter< ::VH::SearchReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* search(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_update() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->update(context, request, response); }));
    }
    ~WithRawCallbackMethod_update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status update(::grpc::ServerContext* /*context*/, const ::VH::UpdateRequestMessage* /*request*/, ::VH::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* update(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_batchupdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_batchupdate() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->batchupdate(context, response); }));
    }
    ~WithRawCallbackMethod_batchupdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batchupdate(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::VH::UpdateRequestMessage>* /*reader*/, ::VH::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* batchupdate(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_updateDX : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_updateDX() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->updateDX(context, request, response); }));
    }
    ~WithRawCallbackMethod_updateDX() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateDX(::grpc::ServerContext* /*context*/, const ::VH::UpdateDXMessage* /*request*/, ::VH::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* updateDX(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_update() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::VH::UpdateRequestMessage, ::VH::ExecuteStatus>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::VH::UpdateRequestMessage, ::VH::ExecuteStatus>* streamer) {
                       return this->Streamedupdate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status update(::grpc::ServerContext* /*context*/, const ::VH::UpdateRequestMessage* /*request*/, ::VH::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedupdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VH::UpdateRequestMessage,::VH::ExecuteStatus>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_updateDX : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_updateDX() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::VH::UpdateDXMessage, ::VH::ExecuteStatus>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::VH::UpdateDXMessage, ::VH::ExecuteStatus>* streamer) {
                       return this->StreamedupdateDX(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_updateDX() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status updateDX(::grpc::ServerContext* /*context*/, const ::VH::UpdateDXMessage* /*request*/, ::VH::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedupdateDX(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VH::UpdateDXMessage,::VH::ExecuteStatus>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_update<WithStreamedUnaryMethod_updateDX<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_search() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::VH::SearchRequestMessage, ::VH::SearchReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::VH::SearchRequestMessage, ::VH::SearchReply>* streamer) {
                       return this->Streamedsearch(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status search(::grpc::ServerContext* /*context*/, const ::VH::SearchRequestMessage* /*request*/, ::grpc::ServerWriter< ::VH::SearchReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status Streamedsearch(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::VH::SearchRequestMessage,::VH::SearchReply>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_search<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_search<WithStreamedUnaryMethod_update<WithStreamedUnaryMethod_updateDX<Service > > > StreamedService;
};

}  // namespace VH


#endif  // GRPC_VH_2eproto__INCLUDED

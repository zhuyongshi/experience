// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VH.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_VH_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_VH_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_VH_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_VH_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_VH_2eproto;
namespace VH {
class ExecuteStatus;
struct ExecuteStatusDefaultTypeInternal;
extern ExecuteStatusDefaultTypeInternal _ExecuteStatus_default_instance_;
class PairMessage;
struct PairMessageDefaultTypeInternal;
extern PairMessageDefaultTypeInternal _PairMessage_default_instance_;
class SearchReply;
struct SearchReplyDefaultTypeInternal;
extern SearchReplyDefaultTypeInternal _SearchReply_default_instance_;
class SearchRequestMessage;
struct SearchRequestMessageDefaultTypeInternal;
extern SearchRequestMessageDefaultTypeInternal _SearchRequestMessage_default_instance_;
class UpdateDXMessage;
struct UpdateDXMessageDefaultTypeInternal;
extern UpdateDXMessageDefaultTypeInternal _UpdateDXMessage_default_instance_;
class UpdateRequestMessage;
struct UpdateRequestMessageDefaultTypeInternal;
extern UpdateRequestMessageDefaultTypeInternal _UpdateRequestMessage_default_instance_;
}  // namespace VH
PROTOBUF_NAMESPACE_OPEN
template<> ::VH::ExecuteStatus* Arena::CreateMaybeMessage<::VH::ExecuteStatus>(Arena*);
template<> ::VH::PairMessage* Arena::CreateMaybeMessage<::VH::PairMessage>(Arena*);
template<> ::VH::SearchReply* Arena::CreateMaybeMessage<::VH::SearchReply>(Arena*);
template<> ::VH::SearchRequestMessage* Arena::CreateMaybeMessage<::VH::SearchRequestMessage>(Arena*);
template<> ::VH::UpdateDXMessage* Arena::CreateMaybeMessage<::VH::UpdateDXMessage>(Arena*);
template<> ::VH::UpdateRequestMessage* Arena::CreateMaybeMessage<::VH::UpdateRequestMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace VH {

// ===================================================================

class UpdateRequestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VH.UpdateRequestMessage) */ {
 public:
  inline UpdateRequestMessage() : UpdateRequestMessage(nullptr) {}
  ~UpdateRequestMessage() override;
  explicit constexpr UpdateRequestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateRequestMessage(const UpdateRequestMessage& from);
  UpdateRequestMessage(UpdateRequestMessage&& from) noexcept
    : UpdateRequestMessage() {
    *this = ::std::move(from);
  }

  inline UpdateRequestMessage& operator=(const UpdateRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateRequestMessage& operator=(UpdateRequestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateRequestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateRequestMessage* internal_default_instance() {
    return reinterpret_cast<const UpdateRequestMessage*>(
               &_UpdateRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UpdateRequestMessage& a, UpdateRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateRequestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateRequestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateRequestMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateRequestMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateRequestMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VH.UpdateRequestMessage";
  }
  protected:
  explicit UpdateRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLFieldNumber = 1,
    kEFieldNumber = 2,
  };
  // bytes l = 1;
  void clear_l();
  const std::string& l() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_l(ArgT0&& arg0, ArgT... args);
  std::string* mutable_l();
  PROTOBUF_NODISCARD std::string* release_l();
  void set_allocated_l(std::string* l);
  private:
  const std::string& _internal_l() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_l(const std::string& value);
  std::string* _internal_mutable_l();
  public:

  // bytes e = 2;
  void clear_e();
  const std::string& e() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_e(ArgT0&& arg0, ArgT... args);
  std::string* mutable_e();
  PROTOBUF_NODISCARD std::string* release_e();
  void set_allocated_e(std::string* e);
  private:
  const std::string& _internal_e() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_e(const std::string& value);
  std::string* _internal_mutable_e();
  public:

  // @@protoc_insertion_point(class_scope:VH.UpdateRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr l_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr e_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_VH_2eproto;
};
// -------------------------------------------------------------------

class PairMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VH.PairMessage) */ {
 public:
  inline PairMessage() : PairMessage(nullptr) {}
  ~PairMessage() override;
  explicit constexpr PairMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PairMessage(const PairMessage& from);
  PairMessage(PairMessage&& from) noexcept
    : PairMessage() {
    *this = ::std::move(from);
  }

  inline PairMessage& operator=(const PairMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PairMessage& operator=(PairMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PairMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const PairMessage* internal_default_instance() {
    return reinterpret_cast<const PairMessage*>(
               &_PairMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PairMessage& a, PairMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(PairMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PairMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PairMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PairMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PairMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PairMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PairMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VH.PairMessage";
  }
  protected:
  explicit PairMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLFieldNumber = 1,
    kEFieldNumber = 2,
  };
  // bytes l = 1;
  void clear_l();
  const std::string& l() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_l(ArgT0&& arg0, ArgT... args);
  std::string* mutable_l();
  PROTOBUF_NODISCARD std::string* release_l();
  void set_allocated_l(std::string* l);
  private:
  const std::string& _internal_l() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_l(const std::string& value);
  std::string* _internal_mutable_l();
  public:

  // bytes e = 2;
  void clear_e();
  const std::string& e() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_e(ArgT0&& arg0, ArgT... args);
  std::string* mutable_e();
  PROTOBUF_NODISCARD std::string* release_e();
  void set_allocated_e(std::string* e);
  private:
  const std::string& _internal_e() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_e(const std::string& value);
  std::string* _internal_mutable_e();
  public:

  // @@protoc_insertion_point(class_scope:VH.PairMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr l_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr e_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_VH_2eproto;
};
// -------------------------------------------------------------------

class UpdateDXMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VH.UpdateDXMessage) */ {
 public:
  inline UpdateDXMessage() : UpdateDXMessage(nullptr) {}
  ~UpdateDXMessage() override;
  explicit constexpr UpdateDXMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateDXMessage(const UpdateDXMessage& from);
  UpdateDXMessage(UpdateDXMessage&& from) noexcept
    : UpdateDXMessage() {
    *this = ::std::move(from);
  }

  inline UpdateDXMessage& operator=(const UpdateDXMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateDXMessage& operator=(UpdateDXMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateDXMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateDXMessage* internal_default_instance() {
    return reinterpret_cast<const UpdateDXMessage*>(
               &_UpdateDXMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UpdateDXMessage& a, UpdateDXMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateDXMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateDXMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateDXMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateDXMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateDXMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateDXMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateDXMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VH.UpdateDXMessage";
  }
  protected:
  explicit UpdateDXMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEDxFieldNumber = 1,
  };
  // repeated .VH.PairMessage e_dx = 1;
  int e_dx_size() const;
  private:
  int _internal_e_dx_size() const;
  public:
  void clear_e_dx();
  ::VH::PairMessage* mutable_e_dx(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VH::PairMessage >*
      mutable_e_dx();
  private:
  const ::VH::PairMessage& _internal_e_dx(int index) const;
  ::VH::PairMessage* _internal_add_e_dx();
  public:
  const ::VH::PairMessage& e_dx(int index) const;
  ::VH::PairMessage* add_e_dx();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VH::PairMessage >&
      e_dx() const;

  // @@protoc_insertion_point(class_scope:VH.UpdateDXMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VH::PairMessage > e_dx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_VH_2eproto;
};
// -------------------------------------------------------------------

class SearchRequestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VH.SearchRequestMessage) */ {
 public:
  inline SearchRequestMessage() : SearchRequestMessage(nullptr) {}
  ~SearchRequestMessage() override;
  explicit constexpr SearchRequestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchRequestMessage(const SearchRequestMessage& from);
  SearchRequestMessage(SearchRequestMessage&& from) noexcept
    : SearchRequestMessage() {
    *this = ::std::move(from);
  }

  inline SearchRequestMessage& operator=(const SearchRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchRequestMessage& operator=(SearchRequestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchRequestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchRequestMessage* internal_default_instance() {
    return reinterpret_cast<const SearchRequestMessage*>(
               &_SearchRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SearchRequestMessage& a, SearchRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchRequestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchRequestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchRequestMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SearchRequestMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchRequestMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VH.SearchRequestMessage";
  }
  protected:
  explicit SearchRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kQFFieldNumber = 2,
    kCntFieldNumber = 3,
  };
  // bytes x = 1;
  void clear_x();
  const std::string& x() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_x(ArgT0&& arg0, ArgT... args);
  std::string* mutable_x();
  PROTOBUF_NODISCARD std::string* release_x();
  void set_allocated_x(std::string* x);
  private:
  const std::string& _internal_x() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_x(const std::string& value);
  std::string* _internal_mutable_x();
  public:

  // uint64 q_f = 2;
  void clear_q_f();
  uint64_t q_f() const;
  void set_q_f(uint64_t value);
  private:
  uint64_t _internal_q_f() const;
  void _internal_set_q_f(uint64_t value);
  public:

  // uint64 cnt = 3;
  void clear_cnt();
  uint64_t cnt() const;
  void set_cnt(uint64_t value);
  private:
  uint64_t _internal_cnt() const;
  void _internal_set_cnt(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:VH.SearchRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr x_;
  uint64_t q_f_;
  uint64_t cnt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_VH_2eproto;
};
// -------------------------------------------------------------------

class SearchReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VH.SearchReply) */ {
 public:
  inline SearchReply() : SearchReply(nullptr) {}
  ~SearchReply() override;
  explicit constexpr SearchReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchReply(const SearchReply& from);
  SearchReply(SearchReply&& from) noexcept
    : SearchReply() {
    *this = ::std::move(from);
  }

  inline SearchReply& operator=(const SearchReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchReply& operator=(SearchReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchReply* internal_default_instance() {
    return reinterpret_cast<const SearchReply*>(
               &_SearchReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SearchReply& a, SearchReply& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SearchReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VH.SearchReply";
  }
  protected:
  explicit SearchReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndFieldNumber = 1,
  };
  // bytes ind = 1;
  void clear_ind();
  const std::string& ind() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ind(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ind();
  PROTOBUF_NODISCARD std::string* release_ind();
  void set_allocated_ind(std::string* ind);
  private:
  const std::string& _internal_ind() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ind(const std::string& value);
  std::string* _internal_mutable_ind();
  public:

  // @@protoc_insertion_point(class_scope:VH.SearchReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_VH_2eproto;
};
// -------------------------------------------------------------------

class ExecuteStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VH.ExecuteStatus) */ {
 public:
  inline ExecuteStatus() : ExecuteStatus(nullptr) {}
  ~ExecuteStatus() override;
  explicit constexpr ExecuteStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExecuteStatus(const ExecuteStatus& from);
  ExecuteStatus(ExecuteStatus&& from) noexcept
    : ExecuteStatus() {
    *this = ::std::move(from);
  }

  inline ExecuteStatus& operator=(const ExecuteStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecuteStatus& operator=(ExecuteStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExecuteStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExecuteStatus* internal_default_instance() {
    return reinterpret_cast<const ExecuteStatus*>(
               &_ExecuteStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ExecuteStatus& a, ExecuteStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecuteStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecuteStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExecuteStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExecuteStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExecuteStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExecuteStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecuteStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VH.ExecuteStatus";
  }
  protected:
  explicit ExecuteStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:VH.ExecuteStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_VH_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UpdateRequestMessage

// bytes l = 1;
inline void UpdateRequestMessage::clear_l() {
  l_.ClearToEmpty();
}
inline const std::string& UpdateRequestMessage::l() const {
  // @@protoc_insertion_point(field_get:VH.UpdateRequestMessage.l)
  return _internal_l();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateRequestMessage::set_l(ArgT0&& arg0, ArgT... args) {
 
 l_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:VH.UpdateRequestMessage.l)
}
inline std::string* UpdateRequestMessage::mutable_l() {
  std::string* _s = _internal_mutable_l();
  // @@protoc_insertion_point(field_mutable:VH.UpdateRequestMessage.l)
  return _s;
}
inline const std::string& UpdateRequestMessage::_internal_l() const {
  return l_.Get();
}
inline void UpdateRequestMessage::_internal_set_l(const std::string& value) {
  
  l_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateRequestMessage::_internal_mutable_l() {
  
  return l_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateRequestMessage::release_l() {
  // @@protoc_insertion_point(field_release:VH.UpdateRequestMessage.l)
  return l_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateRequestMessage::set_allocated_l(std::string* l) {
  if (l != nullptr) {
    
  } else {
    
  }
  l_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), l,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (l_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    l_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:VH.UpdateRequestMessage.l)
}

// bytes e = 2;
inline void UpdateRequestMessage::clear_e() {
  e_.ClearToEmpty();
}
inline const std::string& UpdateRequestMessage::e() const {
  // @@protoc_insertion_point(field_get:VH.UpdateRequestMessage.e)
  return _internal_e();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateRequestMessage::set_e(ArgT0&& arg0, ArgT... args) {
 
 e_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:VH.UpdateRequestMessage.e)
}
inline std::string* UpdateRequestMessage::mutable_e() {
  std::string* _s = _internal_mutable_e();
  // @@protoc_insertion_point(field_mutable:VH.UpdateRequestMessage.e)
  return _s;
}
inline const std::string& UpdateRequestMessage::_internal_e() const {
  return e_.Get();
}
inline void UpdateRequestMessage::_internal_set_e(const std::string& value) {
  
  e_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateRequestMessage::_internal_mutable_e() {
  
  return e_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateRequestMessage::release_e() {
  // @@protoc_insertion_point(field_release:VH.UpdateRequestMessage.e)
  return e_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateRequestMessage::set_allocated_e(std::string* e) {
  if (e != nullptr) {
    
  } else {
    
  }
  e_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), e,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (e_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    e_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:VH.UpdateRequestMessage.e)
}

// -------------------------------------------------------------------

// PairMessage

// bytes l = 1;
inline void PairMessage::clear_l() {
  l_.ClearToEmpty();
}
inline const std::string& PairMessage::l() const {
  // @@protoc_insertion_point(field_get:VH.PairMessage.l)
  return _internal_l();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PairMessage::set_l(ArgT0&& arg0, ArgT... args) {
 
 l_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:VH.PairMessage.l)
}
inline std::string* PairMessage::mutable_l() {
  std::string* _s = _internal_mutable_l();
  // @@protoc_insertion_point(field_mutable:VH.PairMessage.l)
  return _s;
}
inline const std::string& PairMessage::_internal_l() const {
  return l_.Get();
}
inline void PairMessage::_internal_set_l(const std::string& value) {
  
  l_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PairMessage::_internal_mutable_l() {
  
  return l_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PairMessage::release_l() {
  // @@protoc_insertion_point(field_release:VH.PairMessage.l)
  return l_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PairMessage::set_allocated_l(std::string* l) {
  if (l != nullptr) {
    
  } else {
    
  }
  l_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), l,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (l_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    l_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:VH.PairMessage.l)
}

// bytes e = 2;
inline void PairMessage::clear_e() {
  e_.ClearToEmpty();
}
inline const std::string& PairMessage::e() const {
  // @@protoc_insertion_point(field_get:VH.PairMessage.e)
  return _internal_e();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PairMessage::set_e(ArgT0&& arg0, ArgT... args) {
 
 e_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:VH.PairMessage.e)
}
inline std::string* PairMessage::mutable_e() {
  std::string* _s = _internal_mutable_e();
  // @@protoc_insertion_point(field_mutable:VH.PairMessage.e)
  return _s;
}
inline const std::string& PairMessage::_internal_e() const {
  return e_.Get();
}
inline void PairMessage::_internal_set_e(const std::string& value) {
  
  e_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PairMessage::_internal_mutable_e() {
  
  return e_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PairMessage::release_e() {
  // @@protoc_insertion_point(field_release:VH.PairMessage.e)
  return e_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PairMessage::set_allocated_e(std::string* e) {
  if (e != nullptr) {
    
  } else {
    
  }
  e_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), e,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (e_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    e_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:VH.PairMessage.e)
}

// -------------------------------------------------------------------

// UpdateDXMessage

// repeated .VH.PairMessage e_dx = 1;
inline int UpdateDXMessage::_internal_e_dx_size() const {
  return e_dx_.size();
}
inline int UpdateDXMessage::e_dx_size() const {
  return _internal_e_dx_size();
}
inline void UpdateDXMessage::clear_e_dx() {
  e_dx_.Clear();
}
inline ::VH::PairMessage* UpdateDXMessage::mutable_e_dx(int index) {
  // @@protoc_insertion_point(field_mutable:VH.UpdateDXMessage.e_dx)
  return e_dx_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VH::PairMessage >*
UpdateDXMessage::mutable_e_dx() {
  // @@protoc_insertion_point(field_mutable_list:VH.UpdateDXMessage.e_dx)
  return &e_dx_;
}
inline const ::VH::PairMessage& UpdateDXMessage::_internal_e_dx(int index) const {
  return e_dx_.Get(index);
}
inline const ::VH::PairMessage& UpdateDXMessage::e_dx(int index) const {
  // @@protoc_insertion_point(field_get:VH.UpdateDXMessage.e_dx)
  return _internal_e_dx(index);
}
inline ::VH::PairMessage* UpdateDXMessage::_internal_add_e_dx() {
  return e_dx_.Add();
}
inline ::VH::PairMessage* UpdateDXMessage::add_e_dx() {
  ::VH::PairMessage* _add = _internal_add_e_dx();
  // @@protoc_insertion_point(field_add:VH.UpdateDXMessage.e_dx)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VH::PairMessage >&
UpdateDXMessage::e_dx() const {
  // @@protoc_insertion_point(field_list:VH.UpdateDXMessage.e_dx)
  return e_dx_;
}

// -------------------------------------------------------------------

// SearchRequestMessage

// bytes x = 1;
inline void SearchRequestMessage::clear_x() {
  x_.ClearToEmpty();
}
inline const std::string& SearchRequestMessage::x() const {
  // @@protoc_insertion_point(field_get:VH.SearchRequestMessage.x)
  return _internal_x();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchRequestMessage::set_x(ArgT0&& arg0, ArgT... args) {
 
 x_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:VH.SearchRequestMessage.x)
}
inline std::string* SearchRequestMessage::mutable_x() {
  std::string* _s = _internal_mutable_x();
  // @@protoc_insertion_point(field_mutable:VH.SearchRequestMessage.x)
  return _s;
}
inline const std::string& SearchRequestMessage::_internal_x() const {
  return x_.Get();
}
inline void SearchRequestMessage::_internal_set_x(const std::string& value) {
  
  x_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SearchRequestMessage::_internal_mutable_x() {
  
  return x_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SearchRequestMessage::release_x() {
  // @@protoc_insertion_point(field_release:VH.SearchRequestMessage.x)
  return x_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SearchRequestMessage::set_allocated_x(std::string* x) {
  if (x != nullptr) {
    
  } else {
    
  }
  x_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), x,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (x_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    x_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:VH.SearchRequestMessage.x)
}

// uint64 q_f = 2;
inline void SearchRequestMessage::clear_q_f() {
  q_f_ = uint64_t{0u};
}
inline uint64_t SearchRequestMessage::_internal_q_f() const {
  return q_f_;
}
inline uint64_t SearchRequestMessage::q_f() const {
  // @@protoc_insertion_point(field_get:VH.SearchRequestMessage.q_f)
  return _internal_q_f();
}
inline void SearchRequestMessage::_internal_set_q_f(uint64_t value) {
  
  q_f_ = value;
}
inline void SearchRequestMessage::set_q_f(uint64_t value) {
  _internal_set_q_f(value);
  // @@protoc_insertion_point(field_set:VH.SearchRequestMessage.q_f)
}

// uint64 cnt = 3;
inline void SearchRequestMessage::clear_cnt() {
  cnt_ = uint64_t{0u};
}
inline uint64_t SearchRequestMessage::_internal_cnt() const {
  return cnt_;
}
inline uint64_t SearchRequestMessage::cnt() const {
  // @@protoc_insertion_point(field_get:VH.SearchRequestMessage.cnt)
  return _internal_cnt();
}
inline void SearchRequestMessage::_internal_set_cnt(uint64_t value) {
  
  cnt_ = value;
}
inline void SearchRequestMessage::set_cnt(uint64_t value) {
  _internal_set_cnt(value);
  // @@protoc_insertion_point(field_set:VH.SearchRequestMessage.cnt)
}

// -------------------------------------------------------------------

// SearchReply

// bytes ind = 1;
inline void SearchReply::clear_ind() {
  ind_.ClearToEmpty();
}
inline const std::string& SearchReply::ind() const {
  // @@protoc_insertion_point(field_get:VH.SearchReply.ind)
  return _internal_ind();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchReply::set_ind(ArgT0&& arg0, ArgT... args) {
 
 ind_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:VH.SearchReply.ind)
}
inline std::string* SearchReply::mutable_ind() {
  std::string* _s = _internal_mutable_ind();
  // @@protoc_insertion_point(field_mutable:VH.SearchReply.ind)
  return _s;
}
inline const std::string& SearchReply::_internal_ind() const {
  return ind_.Get();
}
inline void SearchReply::_internal_set_ind(const std::string& value) {
  
  ind_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SearchReply::_internal_mutable_ind() {
  
  return ind_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SearchReply::release_ind() {
  // @@protoc_insertion_point(field_release:VH.SearchReply.ind)
  return ind_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SearchReply::set_allocated_ind(std::string* ind) {
  if (ind != nullptr) {
    
  } else {
    
  }
  ind_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ind,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ind_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ind_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:VH.SearchReply.ind)
}

// -------------------------------------------------------------------

// ExecuteStatus

// bool status = 1;
inline void ExecuteStatus::clear_status() {
  status_ = false;
}
inline bool ExecuteStatus::_internal_status() const {
  return status_;
}
inline bool ExecuteStatus::status() const {
  // @@protoc_insertion_point(field_get:VH.ExecuteStatus.status)
  return _internal_status();
}
inline void ExecuteStatus::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void ExecuteStatus::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:VH.ExecuteStatus.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace VH

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_VH_2eproto
